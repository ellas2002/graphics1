#include "../FPToolkit.c"
#include "M3d_matrix_tools.c"

#define MAXOBJS 10
#define MAXPTS 59000
#define MAXPOLYS 57500

#define S_WIDTH 1600
#define S_HEIGHT 1600

#define DEGREE 5

// Structure to replace the listall 2D array
typedef struct {
    int object_number;   // which object 
    int polygon_number;  // which polygon in that object
    double average_distance;  // average distance of polygon from origin
} PolygonInfo;

double RED, GREEN, BLUE ;

int numobjects, rvs ;
double cenX, cenY, cenZ ;
int numpoints[MAXOBJS] ;
int numpolys[MAXOBJS] ;
double x[MAXOBJS][MAXPTS] ;
double y[MAXOBJS][MAXPTS] ;
double z[MAXOBJS][MAXPTS] ;
int psize[MAXOBJS][MAXPOLYS] ;
int con[MAXOBJS][MAXPOLYS][20] ;
PolygonInfo listall[59000];  // Changed from double listall[59000][3]
double color[3][3] = {{1,0,0},
		 {0,1,0},
		 {0,0,1}};
double matrix[4][4] = {0};

// ... (previous functions remain the same until init_array)

// creates the display window filter
int film (double xp[], double yp[], double zp[], int pts, double flmX[], double flmY[]) {
  double xTemp[pts], yTemp[pts] ;

  for (int i = 0; i < pts; i++) {
    flmX[i] = ((xp[i]/zp[i]) * S_WIDTH/2) + S_WIDTH/2 ;
    flmY[i] = ((yp[i]/zp[i]) * S_HEIGHT/2) + S_HEIGHT/2 ;
  }
  
}


// creates the center for the screen
void center_it (int objnum) {
  double xmin, xmax, ymin, ymax, zmin, zmax;
  double center_x, center_y, center_z;
  double dx, dy,dz, sx, sy,nx,ny;

  //find center of bounding box string min x, min y, max x, maxy
  xmin = xmax = x[objnum][0];
  ymin = ymax = y[objnum][0];
  zmin = zmax = z[objnum][0];
  
  
  for(int i = 0; i < numpoints[objnum]; i++){
    if(x[objnum][i] < xmin) xmin = x[objnum][i];
    if(x[objnum][i] > xmax) xmax = x[objnum][i];
    if(y[objnum][i] < ymin) ymin = y[objnum][i];
    if(y[objnum][i] > ymax) ymax = y[objnum][i];
    if(z[objnum][i] < zmin) zmin = z[objnum][i];
    if(z[objnum][i] > zmax) zmax = z[objnum][i];
  }
    
  center_x = (xmax - xmin) / 2;
  center_y = (ymax - ymin) / 2;
  center_z = (zmax - zmin) / 2;
  
  dx = center_x + xmin;
  dy = center_y + ymin;
  dz = center_z + zmin;

  //matrices functions :)

  M3d_make_identity(matrix);
  M3d_make_translation(matrix, dx, dy, dz);
      
  x[objnum][numpoints[objnum]] = 0;
  y[objnum][numpoints[objnum]] = 0;
  z[objnum][numpoints[objnum]] = 0;
}

// reads object
int read_object(FILE *f, int objnum) {
  int i, j, k ;
  
  fscanf(f,"%d",&numpoints[objnum]) ;

  if (numpoints[objnum] >= MAXPTS) {
    printf("MAXPTS = %d :  exceeded.\n", MAXPTS) ;
    exit(1) ;
  }

  for (i = 0; i < numpoints[objnum]; i++) {
    fscanf(f, "%lf %lf %lf", &x[objnum][i], &y[objnum][i], &z[objnum][i]) ;
  }

  // connectivity info
  fscanf(f, "%d",&numpolys[objnum]) ;
  if (numpolys[objnum] > MAXPOLYS) {
    printf("MAXPOLYS = %d :  exceeded.\n", MAXPOLYS) ;
    exit(1) ;
  }

  k = 0 ;
  for (i = 0; i < numpolys[objnum]; i++) {
    fscanf(f, "%d",&psize[objnum][i]) ;
    
    for (j = 0; j < psize[objnum][i]; j++) {
      fscanf(f, "%d",&con[objnum][i][j]) ;
    } // end for j
  } // end for i
}

// draws an individual polygon from an object
int draw_single_poly (int objnum, int polynum) {
  int np, h, i ;
  double xp[100], yp[100], zp[100] ;
  double xFilm[100], yFilm[100] ;
  
  np = psize[objnum][polynum] ;

  for (i = 0; i < np; i++) {
    h = con[objnum][polynum][i] ;
    xp[i] = x[objnum][h] ;
    yp[i] = y[objnum][h] ;
    zp[i] = z[objnum][h] ;
  }

  film(xp, yp, zp, np, xFilm, yFilm) ;
  
  G_rgb(color[objnum][0],color[objnum][1],color[objnum][2]) ;
  G_fill_polygon(xFilm, yFilm, np) ;
  G_rgb(0, 0, 0) ;
  G_polygon(xFilm, yFilm, np) ;
}

int init_array(int nah)
{
  int np = 0;
  int indx = 0;
  int v = 0;
  double distance = 0;

  for(int onum = 0; onum < nah; onum++){
    for(int pnum = 0; pnum < numpolys[onum]; pnum++){
      np = psize[onum][pnum];

      // Populate the structure instead of 2D array
      listall[indx].object_number = onum ;
      listall[indx].polygon_number = pnum ;

      for (int j = 0; j < np; j++) {
	v = con[onum][pnum][j];
	distance += sqrt(pow(x[onum][v], 2) + pow(y[onum][v], 2)+
			 pow(z[onum][v], 2));
      }

      listall[indx].average_distance = distance / np ;
      indx++ ;
      distance = 0 ;
    }
  }
  return indx ;
}

// Updated print_array to work with the new structure
void print_array(int indx) {
  int i ;
  for (i = 0 ; i < indx ; i++) {
    printf("Object: %d, Polygon: %d, Avg Distance: %lf\n", 
       listall[i].object_number, 
       listall[i].polygon_number, 
       listall[i].average_distance) ;
  }
  printf("\n") ;
}

// Updated compare function to work with the new structure
static int compare(const void *p, const void *q)
{    
  PolygonInfo *a, *b ;

  a = (PolygonInfo*)p ;
  b = (PolygonInfo*)q ;

  if  (((*a).average_distance) < ((*b).average_distance)) return -1 ;
  else if (((*a).average_distance) > ((*b).average_distance)) return 1 ;
  else return 0 ;

}

// Updated draw_all_object to work with the new structure
void draw_all_object(int nah) {
   int total_polygons = init_array(nah);
  
  qsort(listall, total_polygons, sizeof(PolygonInfo), compare) ;

  for (int i = 0; i < total_polygons; i++) {
    draw_single_poly(listall[i].object_number, listall[i].polygon_number) ;
  }
}

// ... (rest of the code remains the same)

// the main function that contains the commands
int main (int argc, char **argv) {
  // initialize the screen
  G_init_graphics(S_WIDTH, S_HEIGHT) ;
  G_rgb(0, 0, 0) ;
  G_clear() ;
  
  G_rgb(1,0,0);
  G_fill_rectangle(0, 0, S_WIDTH, 10);
  
  G_rgb(1,1,1);
  
  // lots of stuff here ....
  FILE *fin ;
  int key, w ;
  char fname[100] ;
  int i, j, sum ;
  int  onum = 0 ; // onum marks the current object

  // finds angle stuff
  double t = DEGREE*M_PI/180 ;
  double c = cos(t) ;
  double s = sin(t) ;

  for (i = 0; i < argc; i++) {
    if (i+1 < argc) {
      printf("argv[%d] is %s\n", i+1, argv[i+1]) ;
    }
  }

  numobjects = argc - 1 ;
  
  for (onum = 1; onum < numobjects+1; onum++) {
    fin = fopen(argv[onum], "r") ;
    
    if (fin == NULL) {
      printf("can't read file, %s\n", argv[onum]) ;
      exit(1) ;
    }
    
    read_object(fin, onum-1) ;
    center_it(onum) ;
  }
  
  int  sign = 1 ;
  int  action = 't' ;  
  int  q, k, numpts ;
  double V[4][4] ;
  double final[4][4] ;

  onum = 0 ;
  rvs = 1 ;
  
  while (1) {

    M3d_make_identity(V) ;
    M3d_make_identity(final) ;


    q = G_wait_key() ;

    // to quit
    if (q == 'q') {
      exit(0) ;

      // changes which face is removed
    } else if (q == '-') {
      rvs = -rvs ;

      // changes the sign
    } else if (q == 'c') {
      sign = -sign ;
      c = cos(t * sign) ;
      s = sin(t * sign) ;

      // chooses translation
    } else if (q == 't') {
      action = q ;

      // chooses rotation
    } else if (q == 'r') {
      action = q ;

      // allows the selection of objects
    } else if (('0' <= q) && (q <= '9')) {
      k = q - '0' ;  
      if (k < numobjects) { onum = k ; }

      // translates along x
    } else if ((q == 'x') && (action == 't')) {
      M3d_make_translation(V, 0.5 * sign, 0, 0) ;
      M3d_mat_mult(final, V, final) ;

      // translates along y
    } else if ((q == 'y') && (action == 't')) {
      M3d_make_translation(V, 0, 0.5 * sign, 0) ;
      M3d_mat_mult(final, V, final) ;

      // translates along z
    } else if ((q == 'z') && (action == 't')) {
      M3d_make_translation(V, 0, 0, 0.5 * sign) ;
      M3d_mat_mult(final, V, final) ;

      // rotates around x
    } else if ((q == 'x') && (action == 'r')) {
      numpts = numpoints[onum] ;
      
      M3d_make_translation(V, -x[onum][numpts], -y[onum][numpts], -z[onum][numpts]) ;
      M3d_mat_mult(final, V, final) ;

      M3d_make_x_rotation_cs(V, c, s) ;
      M3d_mat_mult(final, V, final) ;

      M3d_make_translation(V, x[onum][numpts], y[onum][numpts], z[onum][numpts]) ;
      M3d_mat_mult(final, V, final) ;

      // rotates around y
    } else if ((q == 'y') && (action == 'r')) {
      numpts = numpoints[onum] ;
      
      M3d_make_translation(V, -x[onum][numpts], -y[onum][numpts], -z[onum][numpts]) ;
      M3d_mat_mult(final, V, final) ;

      M3d_make_y_rotation_cs(V, c, s) ;
      M3d_mat_mult(final, V, final) ;

      M3d_make_translation(V, x[onum][numpts], y[onum][numpts], z[onum][numpts]) ;
      M3d_mat_mult(final, V, final) ;

      // rotates around z
    } else if ((q == 'z') && (action == 'r')) {
      numpts = numpoints[onum] ;
      
      M3d_make_translation(V, -x[onum][numpts], -y[onum][numpts], -z[onum][numpts]) ;
      M3d_mat_mult(final, V, final) ;

      M3d_make_z_rotation_cs(V, c, s) ;
      M3d_mat_mult(final, V, final) ;

      M3d_make_translation(V, x[onum][numpts], y[onum][numpts], z[onum][numpts]) ;
      M3d_mat_mult(final, V, final) ;

      // if the key is not bound
    } else {
      printf("no action\n") ;
    }



    M3d_mat_mult_points (x[onum],y[onum],z[onum],  final,
			 x[onum],y[onum],z[onum],numpoints[onum]+1) ;
      // the numpoints[onum]+1 is because we have stored the center	
      // of the object at the arrays' end

    G_rgb(0,0,0) ; 
    G_clear() ;
    G_rgb(0,0,1) ;
    
    // draws all the objects
    draw_all_object(numobjects) ;
  }
}
