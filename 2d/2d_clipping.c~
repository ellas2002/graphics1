#include "../FPToolkit.c"



// saves the clicks the user inputs  
int click_and_save(double x[], double y[]){
  G_rgb(0,0,0) ; 
  G_clear() ; 
  G_rgb(1,0,0) ; 
  G_fill_rectangle(0,0,800,40) ;
  double v[2];
  int n = 0;

  while(0 == 0){
      G_wait_click(v);
      
      if( v[0] < 20 && v[1] < 10) {break;}

      x[n] = v[0]; y[n] = v[1]; n++;

      G_fill_circle(v[0],v[1],2);
    }
  
  return n;
 }



int in_out( double x[], double y[], int n, double P[2], int I, int J)
{
  double mx = 0, my = 0;

  for(int i = 0; i < n; i++){
    mx += x[i];
    my += y[i];
  }

  mx = mx / n;
  my = my / n;

  double a = (y[J] - y[I]);
  double b = (x[J] - x[I]);
  double c = (x[J] - x[I]) * y[I] - (y[J] - y[I]) * x[I];

  double signM = a * mx - b * my + c;
  double signP = a * P[0] - b * P[1] + c;

  if (signM > 0 && signP < 0){return 0;}

  if (signM < 0 && signP > 0){return 0;} 


  return 1;
}



int intersect_2_lines (double A[2], double B[2],
		       double C[2], double D[2],
		       double intersection[2])
{
  double m1, m2, b1, b2;

  if (A[0] == B[0] && C[0] == D[0]){return 0;}

  if(A[0] == B[0]) {
    intersection[0] = A[0];
    m2 = (D[1] - C[1]) / D[0] - C[0];
    b2 = C[1] - m2 * C[0];

    intersection[1] = m2 * intersection[0] + b2;
    
  }
  else if(C[0] == D[0]){ 
    intersection[0] = A[0];
    m1 = (B[1] - A[1]) / (B[0] - A[0]);
    b1 = A[1] - m1 * A[0];

    intersection[1] = m1 * intersection[0] + b1;
  }
  
  else{
    m1 = (B[1] - A[1]) / (B[0] - A[0]);
    m2 = (D[1] - C[1]) / (D[0] - C[0]);
  

    if(m1 == m2){return 0;}

    b1 = A[1] - m1 * A[0];
    b2 = C[1] - m2 * C[0];
    
    intersection[0] = (b2 - b1) / (m1 - m2);
    intersection[1] = m1 * intersection[0] + b1;
  }
  
return 1;
}



int clip_line(double A[], double B[], int nab, double x[], double y[], int nxy, int a, int b)
{
  double P[2], intersection[2];
  double aa[2], bb[2], xx[2], yy[2];

  int inout1, inout2;

  double tempx[1000], tempy[1000];
  int ntemp = 0;

  aa[0] = A[a]; aa[1] = B[a];
  bb[0] = A[b]; aa[1] = B[b];


  G_rgb(0,1,1);
  G_polygon(A, B, nab);

  G_rgb(1,0,1);
  G_line(A[a], B[a], A[b], B[b]);

  for( int i = 0; i < nxy ; i++){
    int j = (i + 1) % nxy;

    xx[0] = x[i]; xx[1] = y[i];
    yy[0] = x[j]; yy[1] = y[j];

    P[0] = x[i]; P[1] = y[i];
    inout1 = in_out(A, B, nab, P, a, b);

    P[0] = x[j]; P[1] = y[j];
    inout1 = in_out(A, B, nab, P, a, b); 

    if(inout1 == 1 && inout2 == 1){
      tempx[ntemp] = x[j];
      tempy[ntemp] = y[j];

      ntemp++;
    }

    else if(inout1 == 1 && inout2 == 0){

      intersect_2_lines(aa, bb, xx, yy, intersection);
      G_rgb(0,1,0);

      G_fill_circle(intersection[0], intersection[1], 3);
      tempx[ntemp] = intersection[0];
      tempy[ntemp] = intersection[1];
      ntemp++;

    }

    else if(inout1 == 0 && inout2 == 1){
      intersect_2_lines(aa, bb, xx, yy, intersection);
      G_rgb(0,1,0);

      G_fill_circle(intersection[0], intersection[1], 3);
      tempx[ntemp] = intersection[0];
      tempy[ntemp] = intersection[1];
      ntemp++;

      tempx[ntemp] = x[j];
      tempy[ntemp] = y[j];
      ntemp++;
    }
  }

  G_rgb(1,0,0); G_polygon(x, y, nxy);
  G_rgb(0,1,1); G_polygon(A, B, nab);

  G_rgb(0,1,0); G_polygon(tempx, tempy, ntemp);

  for(int i = 0; i < ntemp; i++){
    x[i] = tempx[i];
    y[i] = tempy[i];
  }

  return ntemp;
}



// Example usage:

int main()
{
  double a[1000], b[1000];
  double x[1000], y[1000];
  double cx[1000], cy[1000];

  int nab, nxy, cxy;
  char q;

  G_init_graphics(800, 800);
  G_rgb(0,0,0);
  G_clear();
  G_fill_rectangle(0,0,800,40);

  cxy = click_and_save(cx,cy);

  while(1){
    G_init_graphics(800, 800);
    G_rgb(0,0,0);
    G_clear();
    G_fill_rectangle(0,0,800,40);
    
    G_rgb(1,0,0);
    G_polygon(cx, cy, cxy);

    nab = click_and_save(a, b);
    G_rgb(0,1,1);
    G_polygon(a, b, nab);

    nxy = cxy;

    for(int i = 0; i < cxy; i++){
      x[i] = cx[i];
      y[i] = cy[i];
    }

    for(int i = 0; i < nab; i++){
      int j = (i + 1) % nab;
      nxy = clip_line(a, b, nab, x, y, nxy, i, j);
    }

    G_init_graphics(800, 800);
    G_rgb(0,0,0);
    G_clear();
    G_fill_rectangle(0,0,800,40);


    G_rgb(0.3, 0, 0);
    G_polygon(cx, cy, cxy);
    G_rgb(0, 0.3, 0.3);
    G_polygon(a, b, nab);
    G_rgb(0, 1, 0);
    G_polygon(x, y, nxy);
   
    
    q = G_wait_key();
    if( q == 113){break;}  
  }

  return 0;
  
}
